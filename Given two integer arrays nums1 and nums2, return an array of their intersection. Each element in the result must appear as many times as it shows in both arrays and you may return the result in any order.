#include <stdio.h>
#include <stdlib.h>


typedef struct HashMapNode {
    int key;
    int count;
    struct HashMapNode *next;
} HashMapNode;
typedef struct HashMap {
    int size;
    HashMapNode **buckets;
} HashMap;
HashMapNode *createHashMapNode(int key) {
    HashMapNode *node = (HashMapNode *)malloc(sizeof(HashMapNode));
    node->key = key;
    node->count = 1;
    node->next = NULL;
    return node;
}

HashMap *createHashMap(int size) {
    HashMap *map = (HashMap *)malloc(sizeof(HashMap));
    map->size = size;
    map->buckets = (HashMapNode **)malloc(size * sizeof(HashMapNode *));
    for (int i = 0; i < size; i++) {
        map->buckets[i] = NULL;
    }
    return map;
}

int hash(int key, int size) {
    return abs(key) % size;
}
void insertIntoHashMap(HashMap *map, int key) {
    int index = hash(key, map->size);
    HashMapNode *node = map->buckets[index];
  
    while (node != NULL) {
        if (node->key == key) {
            node->count++;
            return; // Key already exists
        }
        node = node->next;
    }
   
    HashMapNode *newNode = createHashMapNode(key);
    newNode->next = map->buckets[index];
    map->buckets[index] = newNode;
}


int existsInHashMap(HashMap *map, int key) {
    int index = hash(key, map->size);
    HashMapNode *node = map->buckets[index];
    while (node != NULL) {
        if (node->key == key) {
            return 1; // Key exists
        }
        node = node->next;
    }
    return 0; 
}


int getCountInHashMap(HashMap *map, int key) {
    int index = hash(key, map->size);
    HashMapNode *node = map->buckets[index];
    while (node != NULL) {
        if (node->key == key) {
            return node->count;
        }
        node = node->next;
    }
    return 0; // Key not found (shouldn't happen in this context)
}

void freeHashMap(HashMap *map) {
    for (int i = 0; i < map->size; i++) {
        HashMapNode *node = map->buckets[i];
        while (node != NULL) {
            HashMapNode *temp = node;
            node = node->next;
            free(temp);
        }
    }
    free(map->buckets);
    free(map);
}

int *intersect(int *nums1, int nums1Size, int *nums2, int nums2Size, int *returnSize) {
    
    HashMap *freqMap = createHashMap(nums1Size);
    for (int i = 0; i < nums1Size; i++) {
        insertIntoHashMap(freqMap, nums1[i]);
    }
    
    int *result = (int *)malloc(nums2Size * sizeof(int));
    int resultIndex = 0;
    
    for (int i = 0; i < nums2Size; i++) {
        if (existsInHashMap(freqMap, nums2[i]) && getCountInHashMap(freqMap, nums2[i]) > 0) {
            result[resultIndex++] = nums2[i];
          
            HashMapNode *node = freqMap->buckets[hash(nums2[i], freqMap->size)];
            while (node != NULL) {
                if (node->key == nums2[i]) {
                    node->count--;
                    break;
                }
                node = node->next;
            }
        }
    }
    
   
    *returnSize = resultIndex;
    
    freeHashMap(freqMap);
    
    return result;
}

void printArray(int *arr, int size) {
    printf("[");
    for (int i = 0; i < size; i++) {
        printf("%d", arr[i]);
        if (i < size - 1) {
            printf(", ");
        }
    }
    printf("]\n");
}

int main() {
   
    int nums1[] = {1, 2, 2, 1};
    int nums1Size = 4;
    int nums2[] = {2, 2};
    int nums2Size = 2;

    int returnSize;
    int *result = intersect(nums1, nums1Size, nums2, nums2Size, &returnSize);

    printf("Intersection: ");
    printArray(result, returnSize);

    free(result);

    return 0;
}
